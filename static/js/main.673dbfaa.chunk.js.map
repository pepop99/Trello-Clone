{"version":3,"sources":["components/App.js","serviceWorkerRegistration.js","reportWebVitals.js","reducers/index.js","reducers/board.js","reducers/stage.js","reducers/task.js","fakeAPI.js","store_test.js","store.js","index.js"],"names":["App","className","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","combineReducers","board","state","stages","action","type","stageId","payload","from","to","newStages","Array","splice","filter","id","stage","stageTitle","title","tasks","remainingStages","newTitle","taskId","newTasks","_taskId","source","target","oldIndex","newIndex","sourceTasks","removedTask","targetTasks","task","taskText","text","remainingTasks","tasksToRemove","forEach","fakeAPI","store","console","log","dispatch","uniqid","store_test","localState","localStorage","getItem","JSON","parse","err","loadLocalState","createStore","reducers","getState","length","subscribe","setItem","stringify","saveState","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.673dbfaa.chunk.js","sourcesContent":["import React from 'react';\nimport '../styles/App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"Header\">Board</div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { combineReducers } from 'redux'\nimport board from './board'\nimport stage from './stage'\nimport task from './task'\n\nexport default combineReducers({\n  board,\n  stage,\n  task\n})","export default function board(state = {stages: []}, action) {\n  switch (action.type) {\n    case 'ADD_STAGE': {\n        const {stageId} = action.payload;\n        return {stages: [...state.stages, stageId]};\n    }\n    case 'MOVE_STAGE': {\n        const {from, to} = action.payload;\n        const newStages = Array.from(state.stages);\n        newStages.splice(to, 0, newStages.splice(from, 1)[0]);\n        return {stages: newStages};\n    }\n    case 'DELETE_STAGE': {\n        const {stageId} = action.payload;\n        const newStages = state.stages.filter((id) => id !== stageId);\n        return {stages: newStages};\n    }\n    default:\n      return state\n  }\n}","export default function stage(state = [], action) {\n  switch (action.type) {\n    case 'ADD_STAGE': {\n        const {stageId, stageTitle} = action.payload;\n        return {...state, [stageId]: {\n            id: stageId,\n            title: stageTitle,\n            tasks: []\n        }};\n    }\n    case 'DELETE_STAGE': {\n        const {stageId} = action.payload;\n        const {[stageId]: deletedStage, ...remainingStages} = state;\n        return remainingStages;\n    }\n    case 'RENAME_STAGE': {\n        const {stageId, stageTitle: newTitle} = action.payload;\n        return {...state, [stageId]: {...state[stageId], title: newTitle}};\n    }\n    case 'ADD_TASK': {\n        const {stageId, taskId} = action.payload;\n        return {...state, [stageId]: {...state[stageId], tasks: [...state[stageId].tasks, taskId]}};\n    }\n    case 'DELETE_TASK': {\n        const{stageId, taskId} = action.payload;\n        const newTasks = state[stageId].tasks.filter((_taskId) => _taskId !== taskId);\n        return {...state, [stageId]: {...state[stageId], tasks: newTasks}};\n    }\n    case 'MOVE_TASK': {\n        const {source, target, oldIndex, newIndex} = action.payload;\n        if(source === target){\n            const newTasks = Array.from(state[source].tasks);\n            newTasks.splice(newIndex, 0, newTasks.splice(oldIndex, 1)[0]);\n            return {...state, [source]: {...state[source], tasks: newTasks}};\n        }\n        const sourceTasks = Array.from(state[source].tasks);\n        const [removedTask] = sourceTasks.splice(oldIndex, 1);\n        const targetTasks = Array.from(state[target].tasks);\n        targetTasks.splice(newIndex, 0, removedTask);\n        return {...state, [source]: {...state[source], tasks: sourceTasks}, [target]: {...state[target], tasks: targetTasks}};\n    }\n    default:\n      return state\n  }\n}","export default function task(state = [], action) {\n  switch (action.type) {\n    case 'ADD_TASK': {\n        const {taskId, taskText} = action.payload;\n        return {...state, [taskId]: {id: taskId, text: taskText}};\n    }\n    case 'CHANGE_TASK_TEXT': {\n        const {taskId, taskText} = action.payload;\n        return {...state, [taskId]: {...state[taskId], text: taskText}};\n    }\n    case 'DELETE_TASK': {\n        const {taskId} = action.payload;\n        const {[taskId]: deletedTask, ...remainingTasks} = state;\n        return remainingTasks;\n    }\n    case 'DELETE_STAGE': {\n        const {tasks: tasksToRemove} = action.payload;\n        const newTasks = {...state};\n        tasksToRemove.forEach((task)=>{\n            delete newTasks[task];\n        });\n        return newTasks;\n    }\n    default:\n      return state\n  }\n}","import uniqid from 'uniqid'\n\nconst fakeAPI = (store) => {\n    console.log('Fetching from fake API since no local data detected');\n    // console.log(store.getState());\n    store.dispatch({\n        type: 'ADD_STAGE',\n        payload: {\n            stageId: uniqid(),\n            stageTitle: 'Resources'\n        }\n    });\n    store.dispatch({\n        type: 'ADD_STAGE',\n        payload: {\n            stageId: uniqid(),\n            stageTitle: 'Todo'\n        }\n    });\n    store.dispatch({\n        type: 'ADD_STAGE',\n        payload: {\n            stageId: uniqid(),\n            stageTitle: 'Doing'\n        }\n    });\n    store.dispatch({\n        type: 'ADD_STAGE',\n        payload: {\n            stageId: uniqid(),\n            stageTitle: 'Done'\n        }\n    });\n};\n\nexport default fakeAPI;","import uniqid from 'uniqid'\n\nconst store_test = (store) => {\n    // store.dispatch({\n    //     type: 'ADD_TASK',\n    //     payload: {\n    //         stageId: 'kp74cj1q',\n    //         taskId: uniqid(),\n    //         taskText: 'task2'\n    //     }\n    // })\n    // store.dispatch({\n    //     type: 'DELETE_TASK',\n    //     payload: {\n    //         stageId: 'kp71r7s1',\n    //         taskId: 'kp71rqgh'\n    //     }\n    // })\n    // store.dispatch({\n    //     type: 'MOVE_TASK',\n    //     payload: {\n    //         source: 'kp71r7s1',\n    //         target: 'kp71r7s2',\n    //         oldIndex: 0,\n    //         newIndex: 3\n    //     }\n    // })\n    // store.dispatch({\n    //     type: 'CHANGE_TASK_TEXT',\n    //     payload: {\n    //         taskId: 'kp74en6t',\n    //         taskText: 'New new Task 1'\n    //     }\n    // })\n    // store.dispatch({\n    //     type: 'DELETE_TASK',\n    //     payload: {\n    //         taskId: 'kp74f74n',\n    //         stageId: 'kp74cj1n'\n    //     }\n    // })\n    // store.dispatch({\n    //     type: 'DELETE_STAGE',\n    //     payload: {\n    //         stageId: 'kp74cj1q',\n    //         tasks: store.getState().stage['kp74cj1q'].tasks\n    //     }\n    // })\n};\n\nexport default store_test;","import { createStore } from 'redux'\nimport reducers from './reducers/index'\nimport fakeAPI from './fakeAPI'\nimport uniqid from 'uniqid'\nimport store_test from './store_test'\n\nconst loadLocalState = () => {\n    try{\n        const localState = localStorage.getItem(\"state\");\n        if(localState){\n            return JSON.parse(localState);\n        }\n        return undefined;\n    }\n    catch(err){\n        console.log(\"unable to load local state\");\n    }\n};\n\nconst saveState = (state) => {\n    try{\n        localStorage.setItem(\"state\", JSON.stringify(state));\n    }\n    catch{\n        console.log(\"unable to save state\");\n    }\n};\n\nconst localState = loadLocalState();\nconst store = createStore(reducers, localState);\n// console.log(store.getState());\nif(store.getState().board.stages.length === 0){\n    fakeAPI(store);\n}\n\n//testing data\nstore_test(store);\n\nstore.subscribe = () => {\n    saveState(store.getState());\n};\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\n\nReactDOM.render(\n  <React.StrictMode>\n  <Provider store={store}>\n    <App />\n  </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}