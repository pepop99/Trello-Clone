{"version":3,"sources":["components/Task.js","components/TaskAdd.js","components/Stage.js","components/Board.js","components/App.js","serviceWorkerRegistration.js","reportWebVitals.js","reducers/index.js","reducers/board.js","reducers/stage.js","reducers/task.js","fakeAPI.js","store_test.js","store.js","index.js"],"names":["connect","state","ownProps","task","taskId","props","className","text","TaskAdd","useState","setText","autoFocus","placeholder","value","onKeyDown","key","keyCode","preventDefault","onSave","onChange","ev","target","stage","stageId","addingTask","toggleState","toggleTaskAdd","addTask","taskText","a","dispatch","uniqid","type","payload","onClick","changeTitle","title","tasks","map","index","id","onCancel","board","stages","App","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","combineReducers","action","from","to","newStages","Array","splice","filter","stageTitle","remainingStages","newTitle","newTasks","_taskId","source","oldIndex","newIndex","sourceTasks","removedTask","targetTasks","remainingTasks","tasksToRemove","forEach","fakeAPI","store","console","log","firstStageId","secondStageId","thirdStageId","fourthStageId","store_test","localState","localStorage","getItem","JSON","parse","err","loadLocalState","createStore","reducers","getState","length","subscribe","throttle","setItem","stringify","saveState","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.15ebc426.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport '../styles/components.css';\n\nconst Task = (props) => {\n    const {task} = props;\n    return(\n        <div className='Task'> \n            {task.text}\n        </div>\n    );\n}\n\n\nconst mapStateToProps = (state, ownProps) => ({\n  task: state.task[ownProps.taskId]\n});\n\nexport default connect(mapStateToProps)(Task);","import React, { Component, useState } from \"react\";\nimport TextareaAutosize from \"react-textarea-autosize\";\nimport '../styles/components.css';\n\nconst TaskAdd = (props) => {\n    const [text, setText] = useState(\"\");\n\n    const onCarriage = (key) => {\n        if(key.keyCode === 13){\n            key.preventDefault();\n            props.onSave(text);\n        }\n    }\n    return(\n        <div>\n            <div>\n                <TextareaAutosize \n                    autoFocus\n                    placeholder=\"Enter the text\"\n                    value={text}\n                    onKeyDown={onCarriage}\n                    onChange={(ev) => setText(ev.target.value)}\n                />\n            </div>\n        </div>\n    );\n};\n\nexport default TaskAdd;\n\n\n","import React, {Component, useState} from 'react';\nimport {connect} from 'react-redux';\nimport Task from './Task';\nimport '../styles/components.css';\nimport uniqid from 'uniqid'\nimport TaskAdd from './TaskAdd';\n\nconst changeTitle = () => {\n\n};\n\n\nconst Stage = (props) => {\n    const {stage} = props;\n\n    const [addingTask, toggleState] = useState(false);\n    \n    const toggleTaskAdd = () => {\n        toggleState(!addingTask);\n    }\n\n    const addTask = async (taskText) => {\n        const {stageId, dispatch} = props;\n        toggleTaskAdd();\n        const taskId = uniqid();\n        dispatch({\n            type: 'ADD_TASK',\n            payload: {\n                stageId, taskId, taskText\n            }\n        })\n    };\n\n    return(\n        <div className=\"Stage\">\n            <div className=\"Stage-Title\" onClick={changeTitle()} >{stage.title}</div>\n            {stage.tasks && stage.tasks.map((taskId, index) => {\n                return <Task stageId={stage.id} taskId={taskId} index={index} />\n            })}\n            {addingTask ? (\n                    // console.log('djkf')\n                    <TaskAdd onSave={addTask} onCancel={toggleTaskAdd}/>\n                    ) : (\n                    <div className=\"Toggle-Add-Task\" onClick={() => toggleTaskAdd()}>\n                        Add a Task\n                    </div>\n                    )}\n        </div>\n    );\n}\n\n\nconst mapStateToProps = (state, ownProps) => ({\n  stage: state.stage[ownProps.stageId]\n});\n\nexport default connect(mapStateToProps)(Stage);","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport Stage from './Stage';\nimport '../styles/components.css';\n\nconst Board = (props) => {\n    const {board} = props;\n    return(\n        <div className='Board'>\n            {board.stages.map((stage, index) => {\n                return <Stage stageId={stage} index={index}/>\n            })}\n        </div>\n    );\n}\n\n\nconst mapStateToProps = (state) => ({board: state.board});\nexport default connect(mapStateToProps)(Board);","import React from 'react';\nimport '../styles/App.css';\nimport Board from './Board';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"Header\">Board</div>\n      <Board />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { combineReducers } from 'redux'\nimport board from './board'\nimport stage from './stage'\nimport task from './task'\n\nexport default combineReducers({\n  board,\n  stage,\n  task\n})","export default function board(state = {stages: []}, action) {\n  switch (action.type) {\n    case 'ADD_STAGE': {\n        const {stageId} = action.payload;\n        return {stages: [...state.stages, stageId]};\n    }\n    case 'MOVE_STAGE': {\n        const {from, to} = action.payload;\n        const newStages = Array.from(state.stages);\n        newStages.splice(to, 0, newStages.splice(from, 1)[0]);\n        return {stages: newStages};\n    }\n    case 'DELETE_STAGE': {\n        const {stageId} = action.payload;\n        const newStages = state.stages.filter((id) => id !== stageId);\n        return {stages: newStages};\n    }\n    default:\n      return state\n  }\n}","export default function stage(state = [], action) {\n  switch (action.type) {\n    case 'ADD_STAGE': {\n        const {stageId, stageTitle} = action.payload;\n        return {...state, [stageId]: {\n            id: stageId,\n            title: stageTitle,\n            tasks: []\n        }};\n    }\n    case 'DELETE_STAGE': {\n        const {stageId} = action.payload;\n        const {[stageId]: deletedStage, ...remainingStages} = state;\n        return remainingStages;\n    }\n    case 'RENAME_STAGE': {\n        const {stageId, stageTitle: newTitle} = action.payload;\n        return {...state, [stageId]: {...state[stageId], title: newTitle}};\n    }\n    case 'ADD_TASK': {\n        const {stageId, taskId} = action.payload;\n        return {...state, [stageId]: {...state[stageId], tasks: [...state[stageId].tasks, taskId]}};\n    }\n    case 'DELETE_TASK': {\n        const{stageId, taskId} = action.payload;\n        const newTasks = state[stageId].tasks.filter((_taskId) => _taskId !== taskId);\n        return {...state, [stageId]: {...state[stageId], tasks: newTasks}};\n    }\n    case 'MOVE_TASK': {\n        const {source, target, oldIndex, newIndex} = action.payload;\n        if(source === target){\n            const newTasks = Array.from(state[source].tasks);\n            newTasks.splice(newIndex, 0, newTasks.splice(oldIndex, 1)[0]);\n            return {...state, [source]: {...state[source], tasks: newTasks}};\n        }\n        const sourceTasks = Array.from(state[source].tasks);\n        const [removedTask] = sourceTasks.splice(oldIndex, 1);\n        const targetTasks = Array.from(state[target].tasks);\n        targetTasks.splice(newIndex, 0, removedTask);\n        return {...state, [source]: {...state[source], tasks: sourceTasks}, [target]: {...state[target], tasks: targetTasks}};\n    }\n    default:\n      return state\n  }\n}","export default function task(state = [], action) {\n  switch (action.type) {\n    case 'ADD_TASK': {\n        const {taskId, taskText} = action.payload;\n        return {...state, [taskId]: {id: taskId, text: taskText}};\n    }\n    case 'CHANGE_TASK_TEXT': {\n        const {taskId, taskText} = action.payload;\n        return {...state, [taskId]: {...state[taskId], text: taskText}};\n    }\n    case 'DELETE_TASK': {\n        const {taskId} = action.payload;\n        const {[taskId]: deletedTask, ...remainingTasks} = state;\n        return remainingTasks;\n    }\n    case 'DELETE_STAGE': {\n        const {tasks: tasksToRemove} = action.payload;\n        const newTasks = {...state};\n        tasksToRemove.forEach((task)=>{\n            delete newTasks[task];\n        });\n        return newTasks;\n    }\n    default:\n      return state\n  }\n}","import uniqid from 'uniqid'\n\nconst fakeAPI = (store) => {\n    console.log('Fetching from fake API since no local data detected');\n    // console.log(store.getState());\n    //adding first dummy stage\n    const firstStageId = uniqid();\n    store.dispatch({\n        type: 'ADD_STAGE',\n        payload: {\n            stageId: firstStageId,\n            stageTitle: 'Resources'\n        }\n    });\n    store.dispatch({\n        type: 'ADD_TASK',\n        payload: {\n            stageId: firstStageId,\n            taskId: uniqid(),\n            taskText: 'Financials'\n        }\n    });\n    store.dispatch({\n        type: 'ADD_TASK',\n        payload: {\n            stageId: firstStageId,\n            taskId: uniqid(),\n            taskText: '2017 Goals'\n        }\n    });\n    store.dispatch({\n        type: 'ADD_TASK',\n        payload: {\n            stageId: firstStageId,\n            taskId: uniqid(),\n            taskText: 'Brands guide'\n        }\n    });\n    //adding second dummy stage\n    const secondStageId = uniqid();\n    store.dispatch({\n        type: 'ADD_STAGE',\n        payload: {\n            stageId: secondStageId,\n            stageTitle: 'Todo'\n        }\n    });\n    store.dispatch({\n        type: 'ADD_TASK',\n        payload: {\n            stageId: secondStageId,\n            taskId: uniqid(),\n            taskText: 'Taco drone'\n        }\n    });\n    store.dispatch({\n        type: 'ADD_TASK',\n        payload: {\n            stageId: secondStageId,\n            taskId: uniqid(),\n            taskText: 'BITCOIN'\n        }\n    });\n    store.dispatch({\n        type: 'ADD_TASK',\n        payload: {\n            stageId: secondStageId,\n            taskId: uniqid(),\n            taskText: 'Elon musk'\n        }\n    });\n    //adding third stage id\n    const thirdStageId = uniqid();\n    store.dispatch({\n        type: 'ADD_STAGE',\n        payload: {\n            stageId: thirdStageId,\n            stageTitle: 'Doing'\n        }\n    });\n    store.dispatch({\n        type: 'ADD_TASK',\n        payload: {\n            stageId: thirdStageId,\n            taskId: uniqid(),\n            taskText: 'Matic'\n        }\n    });\n    store.dispatch({\n        type: 'ADD_TASK',\n        payload: {\n            stageId: thirdStageId,\n            taskId: uniqid(),\n            taskText: 'Safe Moono'\n        }\n    });\n    //adding fourth dummy stage\n    const fourthStageId = uniqid();\n    store.dispatch({\n        type: 'ADD_STAGE',\n        payload: {\n            stageId: fourthStageId,\n            stageTitle: 'Done'\n        }\n    });\n    store.dispatch({\n        type: 'ADD_TASK',\n        payload: {\n            stageId: fourthStageId,\n            taskId: uniqid(),\n            taskText: 'Zuddl To the moon'\n        }\n    });\n};\n\nexport default fakeAPI;","// import uniqid from 'uniqid'\n\nconst store_test = (store) => {\n    // store.dispatch({\n    //     type: 'ADD_TASK',\n    //     payload: {\n    //         stageId: 'kp74cj1q',\n    //         taskId: uniqid(),\n    //         taskText: 'task2'\n    //     }\n    // })\n    // store.dispatch({\n    //     type: 'DELETE_TASK',\n    //     payload: {\n    //         stageId: 'kp71r7s1',\n    //         taskId: 'kp71rqgh'\n    //     }\n    // })\n    // store.dispatch({\n    //     type: 'MOVE_TASK',\n    //     payload: {\n    //         source: 'kp71r7s1',\n    //         target: 'kp71r7s2',\n    //         oldIndex: 0,\n    //         newIndex: 3\n    //     }\n    // })\n    // store.dispatch({\n    //     type: 'CHANGE_TASK_TEXT',\n    //     payload: {\n    //         taskId: 'kp74en6t',\n    //         taskText: 'New new Task 1'\n    //     }\n    // })\n    // store.dispatch({\n    //     type: 'DELETE_TASK',\n    //     payload: {\n    //         taskId: 'kp74f74n',\n    //         stageId: 'kp74cj1n'\n    //     }\n    // })\n    // store.dispatch({\n    //     type: 'DELETE_STAGE',\n    //     payload: {\n    //         stageId: 'kp74cj1q',\n    //         tasks: store.getState().stage['kp74cj1q'].tasks\n    //     }\n    // })\n};\n\nexport default store_test;","import { createStore } from 'redux'\nimport reducers from './reducers/index'\nimport fakeAPI from './fakeAPI'\nimport store_test from './store_test'\nimport throttle from \"lodash.throttle\";\n\nconst loadLocalState = () => {\n    try{\n        const localState = localStorage.getItem(\"state\");\n        if(localState){\n            return JSON.parse(localState);\n        }\n        return undefined;\n    }\n    catch(err){\n        console.log(\"unable to load local state\");\n    }\n};\n\nconst saveState = (state) => {\n    try{\n        localStorage.setItem(\"state\", JSON.stringify(state));\n    }\n    catch{\n        console.log(\"unable to save state\");\n    }\n};\n\nconst localState = loadLocalState();\nconst store = createStore(reducers, localState);\n// console.log(store.getState());\nif(store.getState().board.stages.length === 0){\n    fakeAPI(store);\n}\n\n//testing data\nstore_test(store);\n\n// store.subscribe = () => {\n//     saveState(store.getState());\n// };\nstore.subscribe(\n  throttle(() => {\n    saveState(store.getState());\n  }, 1000)\n);\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\n\nReactDOM.render(\n  <React.StrictMode>\n  <Provider store={store}>\n    <App />\n  </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}